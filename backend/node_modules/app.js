const express = require("express");
const app = express();
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const cors = require("cors");

const JWT_SECRET = "your_jwt_secret_key"; // Replace with your actual secret key

app.use(express.json());
app.use(cors());

const mongoUrl = "mongodb+srv://u2004004:shaan@cluster0.nxlfstl.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";

mongoose.connect(mongoUrl, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log("Connected to database");
}).catch(e => console.log(e));

// Mentor Schema
const MentorSchema = new mongoose.Schema(
  {
    fname: { type: String },
    lname: { type: String },
    email: { type: String, unique: true },
    password: { type: String },
    country: { type: String },
    profession: { type: String },
    institution: { type: String },
    stat: { type: String },
  },
  { collection: "MentorInfo" }
);
const Mentor = mongoose.model("MentorInfo", MentorSchema);

// Student Schema
const StudentSchema = new mongoose.Schema(
  {
    fname: { type: String },
    lname: { type: String },
    email: { type: String, unique: true },
    password: { type: String },
    country: { type: String },
    stat: { type: String },
  },
  { collection: "StudentInfo" }
);
const Student = mongoose.model("StudentInfo", StudentSchema);

app.post("/register", async (req, res) => {
  const { fname, lname, email, password, country, profession, institution, stat, role } = req.body;
  const encryptedPassword = await bcrypt.hash(password, 10);

  try {
    const oldUser = role === "mentor" ? await Mentor.findOne({ email }) : await Student.findOne({ email });
    if (oldUser) {
      return res.send({ error: "User Exists" });
    }

    if (role === "mentor") {
      await Mentor.create({
        fname,
        lname,
        email,
        password: encryptedPassword,
        country,
        profession,
        institution,
        stat,
      });
    } else {
      await Student.create({
        fname,
        lname,
        email,
        password: encryptedPassword,
        country,
        stat,
      });
    }
    res.send({ status: "ok" });
  } catch (error) {
    console.error(error);
    res.send({ status: "error" });
  }
});

app.post("/login-user", async (req, res) => {
  const email = req.body.email;
  const password = req.body.password;

  let user = await Mentor.findOne({ email });
  let role = "mentor";
  if (!user) {
    user = await Student.findOne({ email });
    role = "student";
  }

  if (!user) {
    return res.json({ error: "User Not found" });
  }

  if (await bcrypt.compare(password, user.password)) {
    const token = jwt.sign({ role }, JWT_SECRET);
    return res.json({ status: "ok", data: token, role });
  } else {
    return res.json({ error: "Invalid Password" });
  }
});

app.get("/getAllMentors", async (req, res) => {
  try {
    const allMentors = await Mentor.find({});
    res.send({ status: "ok", data: allMentors });
  } catch (error) {
    console.error(error);
    res.send({ status: "error", error: "Failed to fetch mentors" });
  }
});

app.get("/getAllStudents", async (req, res) => {
  try {
    const allStudents = await Student.find({});
    res.send({ status: "ok", data: allStudents });
  } catch (error) {
    console.error(error);
    res.send({ status: "error", error: "Failed to fetch students" });
  }
});

app.listen(5000, () => {
  console.log("Server Started");
});
